/**
 * Created by CTT VNPAY
 */

let express = require("express");
let router = express.Router();
let $ = require("jquery");
const request = require("request");
const moment = require("moment");
const querystring = require("querystring");
const crypto = require("crypto");
require("dotenv").config();
const Invoice = require("../models/invoiceModel");
const User = require("../models/userModel"); // Import User ƒë·ªÉ x√°c nh·∫≠n userId
const {
  removeLineItemsFromCart,
  removeLineItemFromCartPayment,
} = require("../services/cartService");

router.get("/", function (req, res, next) {
  res.render("orderlist", { title: "Danh s√°ch ƒë∆°n h√†ng" });
});

router.get("/create_payment_url/:amount", function (req, res, next) {
  const amount = req.params.amount; // L·∫•y gi√° tr·ªã amount t·ª´ URL
  res.render("order", { title: "ƒê∆†N H√ÄNG", amount: amount });
});

router.get("/querydr", function (req, res, next) {
  let desc = "truy van ket qua thanh toan";
  res.render("querydr", { title: "Truy v·∫•n k·∫øt qu·∫£ thanh to√°n" });
});

router.get("/refund", function (req, res, next) {
  let desc = "Hoan tien GD thanh toan";
  res.render("refund", { title: "Ho√†n ti·ªÅn giao d·ªãch thanh to√°n" });
});

router.post("/create_payment_url", async function (req, res, next) {
  process.env.TZ = "Asia/Ho_Chi_Minh";
  let date = new Date();
  let createDate = moment(date).format("YYYYMMDDHHmmss");

  let ipAddr =
    req.headers["x-forwarded-for"] ||
    req.connection.remoteAddress ||
    req.socket.remoteAddress ||
    req.connection.socket.remoteAddress;

  let tmnCode = process.env.vnp_TmnCode;
  let secretKey = process.env.vnp_HashSecret;
  let vnpUrl = process.env.vnp_Url;
  let returnUrl = process.env.vnp_ReturnUrl;
  let orderId = moment(date).format("DDHHmmss"); // M√£ ƒë∆°n h√†ng
  let amount = req.body.amount;
  let bankCode = req.body.bankCode;
  let userId = req.body.userId; // L∆∞u user Id ƒë·ªÉ t·∫°o h√≥a

  let locale = req.body.language;
  if (locale === null || locale === "") {
    locale = "vn";
  }
  let currCode = "VND";
  let vnp_Params = {};
  vnp_Params["vnp_Version"] = "2.1.0";
  vnp_Params["vnp_Command"] = "pay";
  vnp_Params["vnp_TmnCode"] = tmnCode;
  vnp_Params["vnp_Locale"] = locale;
  vnp_Params["vnp_CurrCode"] = currCode;
  vnp_Params["vnp_TxnRef"] = orderId;
  vnp_Params["vnp_OrderInfo"] = "Thanh toan cho ma GD:" + orderId;
  vnp_Params["vnp_OrderType"] = "other";
  vnp_Params["vnp_Amount"] = amount * 100;
  vnp_Params["vnp_ReturnUrl"] = returnUrl;
  vnp_Params["vnp_IpAddr"] = ipAddr;
  vnp_Params["vnp_CreateDate"] = createDate;
  if (bankCode !== null && bankCode !== "") {
    vnp_Params["vnp_BankCode"] = bankCode;
  }

  vnp_Params = sortObject(vnp_Params);

  let querystring = require("qs");
  let signData = querystring.stringify(vnp_Params, { encode: false });
  let crypto = require("crypto");
  let hmac = crypto.createHmac("sha512", secretKey);
  let signed = hmac.update(Buffer.from(signData, "utf-8")).digest("hex"); // ‚úÖ C√°ch m·ªõi

  vnp_Params["vnp_SecureHash"] = signed;
  vnpUrl += "?" + querystring.stringify(vnp_Params, { encode: false });

  let { language, selectedCartItems, cartId } = req.body;
  if (!userId || !selectedCartItems.length) {
    return res.status(400).json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!" });
  }

  // ‚úÖ L∆∞u v√†o database tr∆∞·ªõc khi redirect sang VNPAY
  try {
    const newInvoice = new Invoice({
      user: userId,
      totalAmount: amount,
      lineItems: selectedCartItems.map((item) => ({
        productId: item.product._id,
        productName: item.product.title,
        quantity: item.quantity,
        price: item.price,
        total: item.total,
        size: item.size,
        color: item.color,
        gender: item.gender,
      })),
      vnp_TxnRef: orderId, // L∆∞u m√£ ƒë∆°n h√†ng ƒë·ªÉ ƒë·ªëi chi·∫øu sau n√†y
      paymentMethod: bankCode || "VNPAY",
    });
    await newInvoice.save(); // L∆∞u v√†o MongoDB
    await Promise.all(
      selectedCartItems.map((item) =>
        removeLineItemFromCartPayment(cartId, item._id)
      )
    );
    console.log("üéØ Ho√†n t·∫•t x√≥a LineItems kh·ªèi gi·ªè h√†ng!");
  } catch (error) {
    console.error("‚ùå L·ªói khi l∆∞u h√≥a ƒë∆°n:", error);
    return res.status(500).json({ message: "L·ªói h·ªá th·ªëng, th·ª≠ l·∫°i sau!" });
  }

  return res.json({ vnpUrl });
});

router.get("/vnpay_return", async function (req, res, next) {
  try {
    let vnp_Params = req.query;

    let secureHash = vnp_Params["vnp_SecureHash"];

    delete vnp_Params["vnp_SecureHash"];
    delete vnp_Params["vnp_SecureHashType"];

    vnp_Params = sortObject(vnp_Params);
    let tmnCode = process.env.vnp_TmnCode;
    let secretKey = process.env.vnp_HashSecret;

    let querystring = require("qs");
    let signData = querystring.stringify(vnp_Params, { encode: false });
    let crypto = require("crypto");
    let hmac = crypto.createHmac("sha512", secretKey);
    let signed = hmac.update(new Buffer(signData, "utf-8")).digest("hex");

    // Ki·ªÉm tra ch·ªØ k√Ω c√≥ h·ª£p l·ªá kh√¥ng
    if (secureHash !== signed) {
      return res.status(400).json({ message: "Invalid signature" });
    }

    // üõí L·∫•y th√¥ng tin t·ª´ VNPAY
    let orderId = String(vnp_Params["vnp_TxnRef"]); // √âp ki·ªÉu String ƒë·ªÉ tr√°nh l·ªói
    let transactionStatus = vnp_Params["vnp_TransactionStatus"]; // Tr·∫°ng th√°i giao d·ªãch
    let transactionNo = vnp_Params["vnp_TransactionNo"]; // M√£ giao d·ªãch
    let bankCode = vnp_Params["vnp_BankCode"]; // Ng√¢n h√†ng thanh to√°n
    let payDate = vnp_Params["vnp_PayDate"]; // Ng√†y thanh to√°n

    // üîç T√¨m h√≥a ƒë∆°n trong database
    let invoice = await Invoice.findOne({ vnp_TxnRef: orderId });
    console.log("Invoice:", invoice);
    if (!invoice) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n!" });
    }

    // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin thanh to√°n v√†o h√≥a ƒë∆°n
    invoice.vnp_TransactionNo = transactionNo;
    invoice.vnp_BankCode = bankCode;
    invoice.vnp_PayDate = payDate;
    invoice.vnp_TransactionStatus = transactionStatus;

    // N·∫øu giao d·ªãch th√†nh c√¥ng (00), c·∫≠p nh·∫≠t tr·∫°ng th√°i "Paid"
    if (transactionStatus === "00") {
      invoice.status = "Paid";
    } else {
      invoice.status = "Cancelled";
    }

    await invoice.save(); // L∆∞u l·∫°i h√≥a ƒë∆°n

    // ‚úÖ Redirect v·ªÅ frontend hi·ªÉn th·ªã k·∫øt qu·∫£ thanh to√°n
    return res.redirect(`http://localhost:5173/levents/invoice`);
  } catch (error) {
    console.error("‚ùå L·ªói x·ª≠ l√Ω VNPAY Return:", error);
    return res.status(500).json({ message: "L·ªói h·ªá th·ªëng!" });
  }
});

router.get("/vnpay_ipn", function (req, res, next) {
  let vnp_Params = req.query;
  let secureHash = vnp_Params["vnp_SecureHash"];

  let orderId = vnp_Params["vnp_TxnRef"];
  let rspCode = vnp_Params["vnp_ResponseCode"];

  delete vnp_Params["vnp_SecureHash"];
  delete vnp_Params["vnp_SecureHashType"];

  vnp_Params = sortObject(vnp_Params);
  let config = require("config");
  let secretKey = config.get("vnp_HashSecret");
  let querystring = require("qs");
  let signData = querystring.stringify(vnp_Params, { encode: false });
  let crypto = require("crypto");
  let hmac = crypto.createHmac("sha512", secretKey);
  let signed = hmac.update(new Buffer(signData, "utf-8")).digest("hex");

  let paymentStatus = "0"; // Gi·∫£ s·ª≠ '0' l√† tr·∫°ng th√°i kh·ªüi t·∫°o giao d·ªãch, ch∆∞a c√≥ IPN. Tr·∫°ng th√°i n√†y ƒë∆∞·ª£c l∆∞u khi y√™u c·∫ßu thanh to√°n chuy·ªÉn h∆∞·ªõng sang C·ªïng thanh to√°n VNPAY t·∫°i ƒë·∫ßu kh·ªüi t·∫°o ƒë∆°n h√†ng.
  //let paymentStatus = '1'; // Gi·∫£ s·ª≠ '1' l√† tr·∫°ng th√°i th√†nh c√¥ng b·∫°n c·∫≠p nh·∫≠t sau IPN ƒë∆∞·ª£c g·ªçi v√† tr·∫£ k·∫øt qu·∫£ v·ªÅ n√≥
  //let paymentStatus = '2'; // Gi·∫£ s·ª≠ '2' l√† tr·∫°ng th√°i th·∫•t b·∫°i b·∫°n c·∫≠p nh·∫≠t sau IPN ƒë∆∞·ª£c g·ªçi v√† tr·∫£ k·∫øt qu·∫£ v·ªÅ n√≥

  let checkOrderId = true; // M√£ ƒë∆°n h√†ng "gi√° tr·ªã c·ªßa vnp_TxnRef" VNPAY ph·∫£n h·ªìi t·ªìn t·∫°i trong CSDL c·ªßa b·∫°n
  let checkAmount = true; // Ki·ªÉm tra s·ªë ti·ªÅn "gi√° tr·ªã c·ªßa vnp_Amout/100" tr√πng kh·ªõp v·ªõi s·ªë ti·ªÅn c·ªßa ƒë∆°n h√†ng trong CSDL c·ªßa b·∫°n
  if (secureHash === signed) {
    //ki·ªÉm tra checksum
    if (checkOrderId) {
      if (checkAmount) {
        if (paymentStatus == "0") {
          //ki·ªÉm tra t√¨nh tr·∫°ng giao d·ªãch tr∆∞·ªõc khi c·∫≠p nh·∫≠t t√¨nh tr·∫°ng thanh to√°n
          if (rspCode == "00") {
            //thanh cong
            //paymentStatus = '1'
            // ·ªû ƒë√¢y c·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch thanh to√°n th√†nh c√¥ng v√†o CSDL c·ªßa b·∫°n
            res.status(200).json({ RspCode: "00", Message: "Success" });
          } else {
            //that bai
            //paymentStatus = '2'
            // ·ªû ƒë√¢y c·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch thanh to√°n th·∫•t b·∫°i v√†o CSDL c·ªßa b·∫°n
            res.status(200).json({ RspCode: "00", Message: "Success" });
          }
        } else {
          res.status(200).json({
            RspCode: "02",
            Message: "This order has been updated to the payment status",
          });
        }
      } else {
        res.status(200).json({ RspCode: "04", Message: "Amount invalid" });
      }
    } else {
      res.status(200).json({ RspCode: "01", Message: "Order not found" });
    }
  } else {
    res.status(200).json({ RspCode: "97", Message: "Checksum failed" });
  }
});

router.post("/querydr", function (req, res, next) {
  process.env.TZ = "Asia/Ho_Chi_Minh";
  let date = new Date();

  let config = require("config");
  let crypto = require("crypto");

  let vnp_TmnCode = config.get("vnp_TmnCode");
  let secretKey = config.get("vnp_HashSecret");
  let vnp_Api = config.get("vnp_Api");

  let vnp_TxnRef = req.body.orderId;
  let vnp_TransactionDate = req.body.transDate;

  let vnp_RequestId = moment(date).format("HHmmss");
  let vnp_Version = "2.1.0";
  let vnp_Command = "querydr";
  let vnp_OrderInfo = "Truy van GD ma:" + vnp_TxnRef;

  let vnp_IpAddr =
    req.headers["x-forwarded-for"] ||
    req.connection.remoteAddress ||
    req.socket.remoteAddress ||
    req.connection.socket.remoteAddress;

  let currCode = "VND";
  let vnp_CreateDate = moment(date).format("YYYYMMDDHHmmss");

  let data =
    vnp_RequestId +
    "|" +
    vnp_Version +
    "|" +
    vnp_Command +
    "|" +
    vnp_TmnCode +
    "|" +
    vnp_TxnRef +
    "|" +
    vnp_TransactionDate +
    "|" +
    vnp_CreateDate +
    "|" +
    vnp_IpAddr +
    "|" +
    vnp_OrderInfo;

  let hmac = crypto.createHmac("sha512", secretKey);
  let vnp_SecureHash = hmac.update(new Buffer(data, "utf-8")).digest("hex");

  let dataObj = {
    vnp_RequestId: vnp_RequestId,
    vnp_Version: vnp_Version,
    vnp_Command: vnp_Command,
    vnp_TmnCode: vnp_TmnCode,
    vnp_TxnRef: vnp_TxnRef,
    vnp_OrderInfo: vnp_OrderInfo,
    vnp_TransactionDate: vnp_TransactionDate,
    vnp_CreateDate: vnp_CreateDate,
    vnp_IpAddr: vnp_IpAddr,
    vnp_SecureHash: vnp_SecureHash,
  };
  // /merchant_webapi/api/transaction
  request(
    {
      url: vnp_Api,
      method: "POST",
      json: true,
      body: dataObj,
    },
    function (error, response, body) {
      console.log(response);
    }
  );
});

router.post("/refund", function (req, res, next) {
  process.env.TZ = "Asia/Ho_Chi_Minh";
  let date = new Date();

  let config = require("config");
  let crypto = require("crypto");

  let vnp_TmnCode = config.get("vnp_TmnCode");
  let secretKey = config.get("vnp_HashSecret");
  let vnp_Api = config.get("vnp_Api");

  let vnp_TxnRef = req.body.orderId;
  let vnp_TransactionDate = req.body.transDate;
  let vnp_Amount = req.body.amount * 100;
  let vnp_TransactionType = req.body.transType;
  let vnp_CreateBy = req.body.user;

  let currCode = "VND";

  let vnp_RequestId = moment(date).format("HHmmss");
  let vnp_Version = "2.1.0";
  let vnp_Command = "refund";
  let vnp_OrderInfo = "Hoan tien GD ma:" + vnp_TxnRef;

  let vnp_IpAddr =
    req.headers["x-forwarded-for"] ||
    req.connection.remoteAddress ||
    req.socket.remoteAddress ||
    req.connection.socket.remoteAddress;

  let vnp_CreateDate = moment(date).format("YYYYMMDDHHmmss");

  let vnp_TransactionNo = "0";

  let data =
    vnp_RequestId +
    "|" +
    vnp_Version +
    "|" +
    vnp_Command +
    "|" +
    vnp_TmnCode +
    "|" +
    vnp_TransactionType +
    "|" +
    vnp_TxnRef +
    "|" +
    vnp_Amount +
    "|" +
    vnp_TransactionNo +
    "|" +
    vnp_TransactionDate +
    "|" +
    vnp_CreateBy +
    "|" +
    vnp_CreateDate +
    "|" +
    vnp_IpAddr +
    "|" +
    vnp_OrderInfo;
  let hmac = crypto.createHmac("sha512", secretKey);
  let vnp_SecureHash = hmac.update(new Buffer(data, "utf-8")).digest("hex");

  let dataObj = {
    vnp_RequestId: vnp_RequestId,
    vnp_Version: vnp_Version,
    vnp_Command: vnp_Command,
    vnp_TmnCode: vnp_TmnCode,
    vnp_TransactionType: vnp_TransactionType,
    vnp_TxnRef: vnp_TxnRef,
    vnp_Amount: vnp_Amount,
    vnp_TransactionNo: vnp_TransactionNo,
    vnp_CreateBy: vnp_CreateBy,
    vnp_OrderInfo: vnp_OrderInfo,
    vnp_TransactionDate: vnp_TransactionDate,
    vnp_CreateDate: vnp_CreateDate,
    vnp_IpAddr: vnp_IpAddr,
    vnp_SecureHash: vnp_SecureHash,
  };

  request(
    {
      url: vnp_Api,
      method: "POST",
      json: true,
      body: dataObj,
    },
    function (error, response, body) {
      console.log(response);
    }
  );
});

function sortObject(obj) {
  let sorted = {};
  let str = [];
  let key;
  for (key in obj) {
    if (obj.hasOwnProperty(key)) {
      str.push(encodeURIComponent(key));
    }
  }
  str.sort();
  for (key = 0; key < str.length; key++) {
    sorted[str[key]] = encodeURIComponent(obj[str[key]]).replace(/%20/g, "+");
  }
  return sorted;
}

module.exports = router;
