const Message = require("../models/messageModel");

// üü¢ G·ª≠i tin nh·∫Øn
const sendMessage = async (senderId, receiverId, message) => {
  try {
    const newMessage = new Message({
      sender: senderId,
      receiver: receiverId,
      message,
      isRead: false,
    });

    await newMessage.save();
    return newMessage;
  } catch (error) {
    console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:", error);
    throw new Error("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn, vui l√≤ng th·ª≠ l·∫°i.");
  }
};
// üü¢ L·∫•y danh s√°ch tin nh·∫Øn gi·ªØa User v√† Admin
const getMessages = async (userId, adminId) => {
  try {
    return await Message.find({
      $or: [
        { sender: userId, receiver: adminId },
        { sender: adminId, receiver: userId },
      ],
    }).sort({ createdAt: 1 });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y tin nh·∫Øn:", error);
    throw new Error("Kh√¥ng th·ªÉ l·∫•y tin nh·∫Øn.");
  }
};

// üü¢ ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc
const markAsRead = async (messageId) => {
  try {
    const updatedMessage = await Message.findByIdAndUpdate(
      messageId,
      { isRead: true },
      { new: true }
    );
    return updatedMessage;
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn:", error);
    throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn.");
  }
};

module.exports = { sendMessage, getMessages, markAsRead };
