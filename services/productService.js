// services/productService.js
const cloudinary = require("cloudinary").v2;
const Product = require("../models/productModel");
const NotificationService = require("../services/notificationService");

// H√†m upload ·∫£nh l√™n Cloudinary
const uploadImageToCloudinary = async (file) => {
  try {
    const result = await cloudinary.uploader.upload(file.path, {
      folder: "products", // L∆∞u ·∫£nh trong th∆∞ m·ª•c 'produucts'
      use_filename: true, // S·ª≠ d·ª•ng t√™n file g·ªëc
      unique_filename: false, // Kh√¥ng th√™m chu·ªói ng·∫´u nhi√™n v√†o t√™n file
    });
    return result.secure_url; // Tr·∫£ v·ªÅ URL c·ªßa ·∫£nh
  } catch (error) {
    throw new Error("L·ªói khi upload ·∫£nh l√™n Cloudinary: " + error.message);
  }
};

// Th√™m s·∫£n ph·∫©m m·ªõi v·ªõi nhi·ªÅu ·∫£nh
const addProduct = async (productData, files) => {
  try {
    if (files && files.length > 0) {
      // L·∫•y danh s√°ch URL ·∫£nh t·ª´ Cloudinary
      const imageUrls = [];
      for (const file of files) {
        const imageUrl = await uploadImageToCloudinary(file); // Upload ·∫£nh l√™n Cloudinary
        imageUrls.push(imageUrl); // Th√™m URL ·∫£nh v√†o m·∫£ng
      }
      productData.images = imageUrls; // G√°n m·∫£ng ·∫£nh cho s·∫£n ph·∫©m
    }

    const newProduct = new Product(productData); // T·∫°o m·ªõi s·∫£n ph·∫©m
    await newProduct.save(); // L∆∞u v√†o DB

    // ‚úÖ G·ª≠i th√¥ng b√°o sau khi th√™m s·∫£n ph·∫©m th√†nh c√¥ng
    await NotificationService.sendGenericNotification(
      null, // Kh√¥ng ch·ªâ ƒë·ªãnh user c·ª• th·ªÉ
      `üÜï Levents ƒë√£ th√™m m·ªôt s·∫£n ph·∫©m m·ªõi: ${newProduct.title}!`, // N·ªôi dung th√¥ng b√°o
      "product", // Lo·∫°i th√¥ng b√°o
      { productId: newProduct._id } // D·ªØ li·ªáu b·ªï sung
    );

    return newProduct; // Tr·∫£ v·ªÅ s·∫£n ph·∫©m v·ª´a th√™m
  } catch (error) {
    throw new Error("Error adding product: " + error.message);
  }
};

// L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
const getAllProducts = async () => {
  try {
    return await Product.find();
  } catch (error) {
    throw new Error("Error fetching products: " + error.message);
  }
};

// H√†m x√≥a s·∫£n ph·∫©m theo title
const deleteProductByTitle = async (title) => {
  try {
    // T√¨m v√† x√≥a s·∫£n ph·∫©m theo title
    const result = await Product.findOneAndDelete({ title });

    if (!result) {
      throw new Error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.");
    }

    return result;
  } catch (error) {
    throw new Error(error.message);
  }
};

// L·∫•y s·∫£n ph·∫©m theo ID
const getProductById = async (id) => {
  try {
    const product = await Product.findById(id);
    if (!product) {
      throw new Error("Product not found");
    }
    return product;
  } catch (error) {
    throw new Error("Error fetching product by ID: " + error.message);
  }
};

// Ch·ªânh s·ª≠a s·∫£n ph·∫©m theo ID
const updateProductById = async (id, productData, file) => {
  try {
    const product = await Product.findById(id);
    if (!product) {
      throw new Error("Product not found");
    }

    if (file) {
      const imageUrl = await uploadImageToCloudinary(file);
      productData.images = [imageUrl]; // C·∫≠p nh·∫≠t ·∫£nh s·∫£n ph·∫©m
    }

    Object.assign(product, productData); // C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m
    await product.save();
    return product;
  } catch (error) {
    throw new Error("Error updating product: " + error.message);
  }
};

// Update s·ªë l∆∞·ª£ng s·∫£n ph·∫©m khi ƒë√£ b√°n ƒë∆∞·ª£c
const updateStockProduct = async (lineItems) => {
  try {
    for (const item of lineItems) {
      const { productId, quantity } = item;

      // T√¨m s·∫£n ph·∫©m theo ID
      const product = await Product.findById(productId);
      if (!product) {
        console.log(`S·∫£n ph·∫©m v·ªõi ID ${productId} kh√¥ng t·ªìn t·∫°i.`);
        continue;
      }

      // Ki·ªÉm tra xem c√≤n ƒë·ªß h√†ng kh√¥ng
      if (product.stock < quantity) {
        console.log(`S·∫£n ph·∫©m ${product.title} kh√¥ng ƒë·ªß h√†ng trong kho.`);
        continue;
      }

      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho v√† s·ªë l∆∞·ª£ng ƒë√£ b√°n
      product.stock -= quantity;
      product.sold += quantity;
      await product.save();
      console.log(
        `ƒê√£ c·∫≠p nh·∫≠t t·ªìn kho cho s·∫£n ph·∫©m: ${product.title}. S·ªë l∆∞·ª£ng c√≤n l·∫°i: ${product.stock}, ƒê√£ b√°n: ${product.sold}`
      );
    }
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m t·ªìn kho", error);
  }
};

// X√≥a s·∫£n ph·∫©m theo ID
const deleteProductById = async (id) => {
  try {
    const product = await Product.findByIdAndDelete(id);
    if (!product) {
      throw new Error("Product not found");
    }
    return product;
  } catch (error) {
    throw new Error("Error deleting product: " + error.message);
  }
};

// L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
const getProductByCategory = async (category) => {
  try {
    const products = await Product.find({ category: category });
    if (!products) {
      throw new Error("Product not found");
    }
    return products;
  } catch (error) {
    throw new Error("Error geting product: " + error.message);
  }
};

module.exports = {
  addProduct,
  getAllProducts,
  getProductById,
  updateProductById,
  deleteProductById,
  deleteProductByTitle,
  updateStockProduct,
  getProductByCategory,
};
