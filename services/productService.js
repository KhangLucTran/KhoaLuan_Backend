// services/productService.js
const cloudinary = require("cloudinary").v2;
const Product = require("../models/productModel");
const NotificationService = require("../services/notificationService");
const cloudinaryService = require("../middleware/cloudinary");

const uploadImageToCloudinary = async (file) => {
  try {
    const result = await cloudinary.uploader.upload(file.path, {
      folder: "products",
      use_filename: true, // D√πng t√™n file g·ªëc
      unique_filename: false, // Kh√¥ng th√™m chu·ªói ng·∫´u nhi√™n
    });

    return {
      url: result.secure_url, // URL ·∫£nh
      publicId: result.public_id, // public_id ch√≠nh x√°c
    };
  } catch (error) {
    throw new Error("L·ªói khi upload ·∫£nh l√™n Cloudinary: " + error.message);
  }
};

const addProduct = async (productData, files) => {
  try {
    if (files && files.length > 0) {
      // ‚úÖ Upload ·∫£nh song song ƒë·ªÉ t·ªëi ∆∞u t·ªëc ƒë·ªô
      const imageUrls = await Promise.all(files.map(uploadImageToCloudinary));
      productData.images = imageUrls; // L∆∞u danh s√°ch ·∫£nh (URL + publicId)
    }

    const newProduct = new Product(productData); // T·∫°o m·ªõi s·∫£n ph·∫©m
    await newProduct.save(); // L∆∞u v√†o DB

    // ‚úÖ G·ª≠i th√¥ng b√°o khi s·∫£n ph·∫©m m·ªõi ƒë∆∞·ª£c th√™m cho t·∫•t c·∫£ ng∆∞·ªùi d√πng
    await NotificationService.createNotification({
      user: null,
      title: "S·∫£n ph·∫©m m·ªõi",
      message: `Qu·∫£n tr·ªã vi√™n Levents ƒë√£ th√™m s·∫£n ph·∫©m ${newProduct.title}`,
      isGlobal: true,
      type: "product",
      productId: newProduct._id,
    });

    return newProduct; // Tr·∫£ v·ªÅ s·∫£n ph·∫©m v·ª´a th√™m
  } catch (error) {
    throw new Error("Error adding product: " + error.message);
  }
};

// L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
const getAllProducts = async () => {
  try {
    return await Product.find();
  } catch (error) {
    throw new Error("Error fetching products: " + error.message);
  }
};

// H√†m x√≥a s·∫£n ph·∫©m theo title
const deleteProductByTitle = async (title) => {
  try {
    // T√¨m v√† x√≥a s·∫£n ph·∫©m theo title
    const result = await Product.findOneAndDelete({ title });

    if (!result) {
      throw new Error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.");
    }

    return result;
  } catch (error) {
    throw new Error(error.message);
  }
};

// H√†m l·∫•y s·∫£n ph·∫©m theo id
const getProductById = async (id) => {
  try {
    const product = await Product.findById(id);
    if (!product) {
      throw new Error("Product not found");
    }

    const imageDetails = await Promise.all(
      product.images.map(async (imageUrl) => {
        try {
          // L·∫•y ƒë√∫ng public_id t·ª´ URL
          const regex = /\/v\d+\/([^/]+)\/([^/.]+)/;
          const match = imageUrl.match(regex);
          if (!match) throw new Error("Invalid Cloudinary URL");

          const publicId = `${match[1]}/${match[2]}`;

          // G·ªçi Cloudinary API ƒë·ªÉ l·∫•y th√¥ng tin ·∫£nh
          const imageInfo = await cloudinary.api.resource(publicId);

          return {
            url: imageUrl,
            fileName: imageInfo.public_id.split("/").pop(),
            format: imageInfo.format,
            size: (imageInfo.bytes / 1024).toFixed(2) + " KB",
            dimensions: `${imageInfo.width}x${imageInfo.height} px`,
          };
        } catch (error) {
          console.error("Error fetching image details from Cloudinary:", error);
          return null;
        }
      })
    );

    return { ...product.toObject(), imageDetails };
  } catch (error) {
    throw new Error("Error fetching product by ID: " + error.message);
  }
};

// Ch·ªânh s·ª≠a s·∫£n ph·∫©m theo ID
const updateProductById = async (id, productData, files) => {
  try {
    const product = await Product.findById(id);
    if (!product) {
      throw new Error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i");
    }
    // üî• 1. X√≥a ·∫£nh c≈© n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu
    const deletedImages = Array.isArray(productData.deletedImages)
      ? productData.deletedImages
      : [];

    if (deletedImages.length > 0) {
      for (const imageUrl of deletedImages) {
        await cloudinaryService.deleteImageFromCloudinary(imageUrl);
        product.images = product.images.filter((img) => img !== imageUrl);
      }
    }

    // üî• 2. Upload ·∫£nh m·ªõi n·∫øu c√≥
    let uploadedImages = [];
    if (files && Array.isArray(files)) {
      for (const file of files) {
        const imageUrl = await uploadImageToCloudinary(file);
        uploadedImages.push(imageUrl);
      }
    }

    // üî• 3. C·∫≠p nh·∫≠t danh s√°ch ·∫£nh m·ªõi
    product.images = [...product.images, ...uploadedImages];
    Object.assign(product, productData); // C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m
    await product.save();
    return product;
  } catch (error) {
    throw new Error("L·ªói trong qu√° tr√¨nh ch·ªânh s·ª≠a s·∫£n ph·∫©m: " + error.message);
  }
};

// Update s·ªë l∆∞·ª£ng s·∫£n ph·∫©m khi ƒë√£ b√°n ƒë∆∞·ª£c
const updateStockProduct = async (lineItems) => {
  try {
    for (const item of lineItems) {
      const { productId, quantity } = item;

      // T√¨m s·∫£n ph·∫©m theo ID
      const product = await Product.findById(productId);
      if (!product) {
        console.log(`S·∫£n ph·∫©m v·ªõi ID ${productId} kh√¥ng t·ªìn t·∫°i.`);
        continue;
      }

      // Ki·ªÉm tra xem c√≤n ƒë·ªß h√†ng kh√¥ng
      if (product.stock < quantity) {
        console.log(`S·∫£n ph·∫©m ${product.title} kh√¥ng ƒë·ªß h√†ng trong kho.`);
        continue;
      }

      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho v√† s·ªë l∆∞·ª£ng ƒë√£ b√°n
      product.stock -= quantity;
      product.sold += quantity;
      await product.save();
      console.log(
        `ƒê√£ c·∫≠p nh·∫≠t t·ªìn kho cho s·∫£n ph·∫©m: ${product.title}. S·ªë l∆∞·ª£ng c√≤n l·∫°i: ${product.stock}, ƒê√£ b√°n: ${product.sold}`
      );
    }
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m t·ªìn kho", error);
  }
};

// X√≥a s·∫£n ph·∫©m theo ID
const deleteProductById = async (id, userId) => {
  try {
    const product = await Product.findByIdAndDelete(id);
    if (!product) {
      throw new Error("Product not found");
    }
    // G·ª≠i th√¥ng b√°o ng∆∞·ªùi d√πng ch·ªânh s·ª≠a d·ªØ li·ªáu th√†nh c√¥ng
    await NotificationService.createNotification({
      user: userId,
      title: "S·∫£n ph·∫©m ƒë√£ b·ªã x√≥a",
      message: `Qu·∫£n tr·ªã vi√™n ƒë√£ x√≥a s·∫£n ph·∫©m ${product.title}`,
      isGlobal: true,
      type: "product",
      productId: product._id,
    });

    return product;
  } catch (error) {
    throw new Error("Error deleting product: " + error.message);
  }
};

// L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
const getProductByCategory = async (category) => {
  try {
    const products = await Product.find({ category: category });
    if (!products) {
      throw new Error("Product not found");
    }
    return products;
  } catch (error) {
    throw new Error("Error geting product: " + error.message);
  }
};

const recommendByCategories = async (
  categories,
  limit = 6,
  additionalLimit
) => {
  // L·∫•y 1 m√≥n m·ªõi nh·∫•t m·ªói category
  const onePerCategory = await Product.aggregate([
    { $match: { category: { $in: categories } } },
    { $sort: { createdAt: -1 } },
    {
      $group: {
        _id: "$category",
        product: { $first: "$$ROOT" },
      },
    },
    { $replaceRoot: { newRoot: "$product" } },
  ]);

  const idsTaken = onePerCategory.map((p) => p._id);

  // N·∫øu kh√¥ng truy·ªÅn additionalLimit th√¨ l·∫•y ƒë·ªß s·ªë c√≤n l·∫°i ƒë·ªÉ ƒë·ªß limit
  const addLimit = additionalLimit ?? limit - onePerCategory.length;

  // L·∫•y th√™m s·∫£n ph·∫©m kh√°c (kh√¥ng tr√πng), limit ph√π h·ª£p
  const additionalProducts = await Product.find({
    category: { $in: categories },
    _id: { $nin: idsTaken },
  })
    .sort({ createdAt: -1 })
    .limit(addLimit)
    .exec();

  return [...onePerCategory, ...additionalProducts];
};
const recommendLichLam = () =>
  recommendByCategories(["Shirt", "Pants", "Jacket"]);
const recommendThoaiMai = () =>
  recommendByCategories(["T-Shirt", "Short", "Accessories"]);
const recommendNangDong = () =>
  recommendByCategories(["T-Shirt", "Jacket", "Short"]);
const recommendStreetStyle = () =>
  recommendByCategories(["Hat", "Jacket", "T-Shirt", "Accessories"], 6, 2);
const recommendToiGian = () => recommendByCategories(["T-Shirt", "Pants"]);
const recommendCongSo = () =>
  recommendByCategories(["Shirt", "Pants", "Accessories"]);
const recommendHienDai = () =>
  recommendByCategories(["Accessories", "Hat", "Jacket", "T-Shirt"]);

const intentToCategories = {
  recommendLichLam: ["Shirt", "Pants", "Jacket"], // Shirt + Pants => OK
  recommendThoaiMai: ["T-Shirt", "Short", "Accessories"], // T-Shirt + Short => OK
  recommendNangDong: ["T-Shirt", "Short", "Jacket"], // T-Shirt + Short => OK
  recommendStreetStyle: ["T-Shirt", "Short", "Jacket", "Accessories"], // T-Shirt + Short => OK
  recommendToiGian: ["T-Shirt", "Pants"], // T-Shirt + Pants => OK
  recommendCongSo: ["Shirt", "Pants", "Accessories"], // Shirt + Pants => OK
  recommendHienDai: ["T-Shirt", "Short", "Jacket", "Accessories", "Hat"], // T-Shirt + Short => OK
};

const recommendSetByBudget = async (intent, budget) => {
  const categories = intentToCategories[intent];
  if (!categories || !Array.isArray(categories)) {
    return []; // N·∫øu intent kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒë·ªãnh nghƒ©a
  }

  const pantsCategories = ["Pants", "Short"];
  const shirtCategories = ["Shirt", "T-Shirt"];
  const accessoryCategories = ["Accessories"];
  const jacketCategories = ["Jacket"];
  const hatCategories = ["Hat"];

  const products = await Product.find({ category: { $in: categories } })
    .sort({ createdAt: -1 })
    .exec();
  console.log("S·∫£n ph·∫©m", products);

  const pants = products.filter((p) => pantsCategories.includes(p.category));
  const shirts = products.filter((p) => shirtCategories.includes(p.category));
  const accessories = products.filter((p) =>
    accessoryCategories.includes(p.category)
  );
  const jackets = products.filter((p) => jacketCategories.includes(p.category));
  const hats = products.filter((p) => hatCategories.includes(p.category));

  // N·∫øu kh√¥ng c√≥ √°o ho·∫∑c kh√¥ng c√≥ qu·∫ßn th√¨ kh√¥ng th·ªÉ g·ª£i √Ω
  if (pants.length === 0 || shirts.length === 0) return [];

  let bestPair = null;
  let bestPairPrice = 0;

  for (const pant of pants) {
    for (const shirt of shirts) {
      const total = pant.price + shirt.price;
      if (total <= budget && total > bestPairPrice) {
        bestPair = [pant, shirt];
        bestPairPrice = total;
      }
    }
  }

  // N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c c·∫∑p √°o + qu·∫ßn n√†o trong ng√¢n s√°ch th√¨ return []
  if (!bestPair) return [];

  let remainingBudget = budget - bestPairPrice;
  const additionalItems = [];

  const pickItem = (items) => {
    const affordable = items.filter(
      (item) =>
        item.price <= remainingBudget &&
        !additionalItems.includes(item) &&
        !bestPair.includes(item)
    );
    if (affordable.length === 0) return null;
    affordable.sort((a, b) => b.price - a.price);
    return affordable[0];
  };

  const groups = [accessories, jackets, hats];

  for (const group of groups) {
    let item = pickItem(group);
    while (item && remainingBudget >= item.price) {
      additionalItems.push(item);
      remainingBudget -= item.price;
      item = pickItem(group);
    }
  }

  return [...bestPair, ...additionalItems];
};

module.exports = {
  addProduct,
  getAllProducts,
  getProductById,
  updateProductById,
  deleteProductById,
  deleteProductByTitle,
  updateStockProduct,
  getProductByCategory,
  recommendNangDong,
  recommendLichLam,
  recommendThoaiMai,
  recommendStreetStyle,
  recommendHienDai,
  recommendCongSo,
  recommendToiGian,
  recommendSetByBudget,
};
