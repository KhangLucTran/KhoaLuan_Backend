const responses = require("../constants/chatbotResponse");
const chatbotTrainService = require("../services/chatbotTrainService");
const recommendSystemService = require("../services/recommendSystemService");
const productService = require("../services/productService");
const { lang } = require("moment");

const redirectMap = {
  redirect_to_products: {
    path: "/levents/products",
    reply: "ƒêang chuy·ªÉn b·∫°n ƒë·∫øn trang s·∫£n ph·∫©m nh√©!",
  },
  redirect_to_login: {
    path: "/levents/login",
    reply: "ƒêang chuy·ªÉn b·∫°n ƒë·∫øn trang ƒëƒÉng nh·∫≠p nh√©!",
    confirmMessage:
      "M√¨nh kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p gi√∫p b·∫°n, nh∆∞ng c√≥ th·ªÉ chuy·ªÉn b·∫°n ƒë·∫øn trang ƒëƒÉng nh·∫≠p. B·∫°n c√≥ mu·ªën m√¨nh gi√∫p kh√¥ng?",
  },
  redirect_to_register: {
    path: "/levents/register",
    reply: "ƒêang chuy·ªÉn b·∫°n ƒë·∫øn trang ƒëƒÉng k√≠ nh√©!",
    confirmMessage: "B·∫°n mu·ªën m√¨nh chuy·ªÉn b·∫°n ƒë·∫øn trang ƒëƒÉng k√Ω kh√¥ng?",
  },
  redirect_to_cart: {
    path: "/levents/cart",
    reply: "ƒêang chuy·ªÉn b·∫°n ƒë·∫øn gi·ªè h√†ng nh√©!",
    confirmMessage: "B·∫°n c√≥ mu·ªën m√¨nh chuy·ªÉn b·∫°n ƒë·∫øn gi·ªè h√†ng kh√¥ng?",
  },
  redirect_to_invoices: {
    path: "/levents/invoice",
    reply: "ƒêang chuy·ªÉn b·∫°n ƒë·∫øn trang h√≥a ƒë∆°n nh√©!",
  },
  redirect_to_favorites: {
    path: "/levents/favorite",
    reply: "ƒêang chuy·ªÉn b·∫°n ƒë·∫øn trang y√™u th√≠ch nh√©!",
  },
  redirect_to_profile: {
    path: "/levents/profile/view",
    reply: "ƒêang chuy·ªÉn b·∫°n ƒë·∫øn trang c√° nh√¢n nh√©!",
  },
};

// Map confirm context cho t·ª´ng redirect intent, ti·ªán cho x√°c nh·∫≠n
const confirmContextMap = {
  redirect_to_login: "confirm_redirect_to_login",
  redirect_to_register: "confirm_redirect_to_register",
  redirect_to_cart: "confirm_redirect_to_cart",
};

function mapIntentToVietnamese(intent) {
  const intentToVietnamese = {
    recommendLichLam: "L·ªãch l√£m",
    recommendThoaiMai: "Tho·∫£i m√°i",
    recommendNangDong: "NƒÉng ƒë·ªông",
    recommendStreetStyle: "Street Style",
    recommendToiGian: "T·ªëi gi·∫£n",
    recommendCongSo: "C√¥ng s·ªü",
    recommendHienDai: "Hi·ªán ƒë·∫°i",
  };

  return intentToVietnamese[intent] || "Kh√¥ng x√°c ƒë·ªãnh";
}

async function chatbotReply(req, res) {
  try {
    const { message } = req.body;
    const userId = req.user?._id || null;
    console.log("UserId:", userId);
    console.log("Message User:", message);
    if (!message || message.trim() === "") {
      return res.status(400).json({
        success: false,
        error: "Message kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      });
    }
    const height = extractHeightFromMessage(message);
    const weight = extractWeightFromMessage(message);
    if (height && weight) {
      return handleSuggestSize(height, weight, res);
    }

    const money = extractMoneyFromMessage(message);
    console.log("ti·ªÅn:", money);

    const intentResult = await chatbotTrainService.getIntent(message);
    const intent = intentResult.intent;

    console.log("Intent Mapping from Message: ", intent);
    if (money) {
      return recommendSetByIntentAndBudget(req, res, intent, money);
    }
    switch (intent) {
      // Intent Default
      case "what_can_you_do":
      case "chatbot_info":
      case "bot_name":
      case "greeting":
      case "shop_info":
      case "goodbye":
      case "thanks":
        return handleDefaultIntent(req, res, intent);

      // Intent Data
      case "top_search_products":
      case "product_inquiry":
        return handleProductIntent(req, res, intent, userId);

      // Intent Styles
      case "recommendLichLam":
      case "recommendThoaiMai":
      case "recommendNangDong":
      case "recommendStreetStyle":
      case "recommendToiGian":
      case "recommendCongSo":
      case "recommendHienDai":
        return handleStyleRecommendationIntent(req, res, intent);

      // Intent Redirect
      case "redirect_to_login":
      case "redirect_to_register":
      case "redirect_to_cart":
      case "redirect_to_products":
      case "redirect_to_invoices":
      case "redirect_to_favorites":
      case "redirect_to_profile":
        return handleRedirectIntent(req, res, intent, userId);

      default:
        res.json({
          reply: "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi",
        });
    }
  } catch (error) {
    // X·ª≠ l√≠ l·ªói
    console.error("L·ªói chatbot:", error);
    return res.status(500).json({
      success: false,
      error: "L·ªói server khi x·ª≠ l√Ω chatbot",
    });
  }
}

// ====================== HANDLE INTENT ==================================
// X·ª≠ l√≠ intent chung c√≥ m·∫´u c√¢u tr·∫£ v·ªÅ (reply, intent)
async function handleDefaultIntent(req, res, intent) {
  const reply =
    responses[intent] || "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.";
  return res.json({ intent, reply });
}

// X·ª≠ l√≠ intent li√™n quan ƒë·∫øn height v√† weight
async function handleSuggestSize(height, weight, res) {
  const size = suggestSize(height, weight);
  const reply = size
    ? `üìè V·ªõi chi·ªÅu cao ${height}cm v√† c√¢n n·∫∑ng ${weight}kg, size ph√π h·ª£p v·ªõi b·∫°n c√≥ th·ªÉ l√† **${size}** nh√©!`
    : "M√¨nh ch∆∞a th·ªÉ x√°c ƒë·ªãnh ƒë∆∞·ª£c size ph√π h·ª£p, b·∫°n vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.";
  return res.json({ reply, height, weight, size });
}
// X·ª≠ l√≠ t∆∞ v·∫•n phong c√°ch khi c√≥ ti·ªÅn
const recommendSetByIntentAndBudget = async (req, res, intent, money) => {
  try {
    const products = await productService.recommendSetByBudget(intent, money);
    if (products.length === 0) {
      return res.json({
        reply: `R·∫•t ti·∫øc, hi·ªán t·∫°i kh√¥ng t√¨m ƒë∆∞·ª£c b·ªô ƒë·ªì ph√π h·ª£p v·ªõi ng√¢n s√°ch ${money.toLocaleString()}‚Ç´.`,
      });
    }

    return res.json({
      reply: `G·ª£i √Ω trang ph·ª•c theo phong c√°ch "${mapIntentToVietnamese(
        intent
      )}" v·ªõi ng√¢n s√°ch ${money.toLocaleString()}‚Ç´:`,
      products,
    });
  } catch (err) {
    console.error("L·ªói khi g·ª£i √Ω theo ng√¢n s√°ch:", err);
    return res.status(500).json({
      success: false,
      error: "L·ªói khi x·ª≠ l√Ω g·ª£i √Ω theo ng√¢n s√°ch.",
    });
  }
};

// X·ª≠ l√Ω c√°c intent tr·∫£ v·ªÅ g·ª£i √Ω s·∫£n ph·∫©m: top_search_products v√† product_inquiry
async function handleProductIntent(req, res, intent, userId) {
  try {
    let products = [];
    let reply = "";

    if (intent === "top_search_products") {
      if (userId) {
        products = await recommendSystemService.getContentBaseRecommendations(
          userId
        );
        reply =
          "üßê D∆∞·ªõi ƒë√¢y l√† nh·ªØng s·∫£n ph·∫©m b·∫°n hay t√¨m ki·∫øm nh·∫•t t·∫°i Levents. Hy v·ªçng b·∫°n s·∫Ω th√≠ch! ‚ú®\n\nüëâ B·∫°n c√≥ th·ªÉ click v√†o s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt nh√©!";
      } else {
        products =
          await recommendSystemService.getPersonalizedRecommendations();
        reply =
          "üî• ƒê√¢y l√† nh·ªØng s·∫£n ph·∫©m ƒëang c·ª±c k·ª≥ ƒë∆∞·ª£c y√™u th√≠ch t·∫°i Levents! B·∫°n kh√¥ng n√™n b·ªè l·ª° ƒë√¢u üòâ\n\nüëâ B·∫°n c√≥ th·ªÉ click v√†o s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt nh√©!";
      }
    } else if (intent === "product_inquiry") {
      if (userId) {
        products = await recommendSystemService.getRecommendations(userId);
        reply =
          "ü§î B·∫°n ƒëang t√¨m ki·∫øm s·∫£n ph·∫©m n√†o? D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë g·ª£i √Ω d√†nh ri√™ng cho b·∫°n!\n\nüëâ B·∫°n c√≥ th·ªÉ click v√†o s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt nh√©!";
      } else {
        products =
          await recommendSystemService.getPersonalizedRecommendations();
        reply =
          "üí° ƒê√¢y l√† nh·ªØng s·∫£n ph·∫©m n·ªïi b·∫≠t ƒëang ƒë∆∞·ª£c nhi·ªÅu ng∆∞·ªùi quan t√¢m. B·∫°n th·ª≠ tham kh·∫£o nh√©!\n\nüëâ B·∫°n c√≥ th·ªÉ click v√†o s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt nh√©!";
      }
    }

    products = products.slice(0, 4);
    console.log(intent, reply);
    return res.json({ intent, reply, products });
  } catch (error) {
    console.error(`L·ªói khi x·ª≠ l√Ω intent ${intent}:`, error);
    return res.json({
      reply: "Xin l·ªói, t√¥i ch∆∞a th·ªÉ g·ª£i √Ω s·∫£n ph·∫©m l√∫c n√†y üò•",
    });
  }
}

// X·ª≠ l√≠ intent li√™n quan ƒë·∫øn g·ª£i √Ω theo phong c√°ch
async function handleStyleRecommendationIntent(req, res, intent) {
  try {
    const mapping = {
      recommendLichLam: {
        reply:
          responses[intent] || "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.",
        handler: productService.recommendLichLam,
      },
      recommendThoaiMai: {
        reply:
          responses[intent] || "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.",
        handler: productService.recommendThoaiMai,
      },

      recommendNangDong: {
        reply:
          responses[intent] || "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.",
        handler: productService.recommendNangDong,
      },

      recommendStreetStyle: {
        reply:
          responses[intent] || "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.",
        handler: productService.recommendStreetStyle,
      },

      recommendToiGian: {
        reply:
          responses[intent] || "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.",
        handler: productService.recommendToiGian,
      },

      recommendCongSo: {
        reply:
          responses[intent] || "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.",
        handler: productService.recommendCongSo,
      },

      recommendHienDai: {
        reply:
          responses[intent] || "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.",
        handler: productService.recommendHienDai,
      },
    };

    const selected = mapping[intent];
    if (!selected) {
      return res.json({
        reply: "Xin l·ªói, m√¨nh ch∆∞a c√≥ g·ª£i √Ω cho phong c√°ch n√†y.",
      });
    }

    const products = await selected.handler();
    return res.json({
      intent,
      reply: selected.reply,
      products,
    });
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω g·ª£i √Ω phong c√°ch:", error);
    return res.status(500).json({
      reply: "Xin l·ªói, m√¨nh ch∆∞a th·ªÉ g·ª£i √Ω s·∫£n ph·∫©m l√∫c n√†y üò•",
    });
  }
}

// X·ª≠ l√≠ intent li√™n quan ƒë·∫øn redirect
function handleRedirectIntent(req, res, intent, userId) {
  const redirectData = redirectMap[intent];
  const confirmContext = confirmContextMap[intent] || null;

  if (!redirectData) {
    return res.json({
      reply: "Xin l·ªói, m√¨nh ch∆∞a c√≥ ƒë∆∞·ªùng d·∫´n cho ch·ª©c nƒÉng n√†y.",
    });
  }

  // N·∫øu intent y√™u c·∫ßu x√°c nh·∫≠n tr∆∞·ªõc khi chuy·ªÉn
  if (redirectData.confirmMessage) {
    // G·ª£i √Ω: L∆∞u context x√°c nh·∫≠n v√†o session, cookie, ho·∫∑c DB n·∫øu c·∫ßn
    req.session = req.session || {};
    req.session.confirmContext = confirmContext;

    return res.json({
      reply: redirectData.confirmMessage,
      requireConfirmation: true, // frontend s·∫Ω d√πng flag n√†y ƒë·ªÉ hi·ªÉn th·ªã l·ª±a ch·ªçn "ƒê·ªìng √Ω"
      redirectPath: redirectData.path,
    });
  }

  // N·∫øu kh√¥ng c·∫ßn x√°c nh·∫≠n => tr·∫£ ph·∫£n h·ªìi ngay
  return res.json({
    reply: redirectData.reply,
    redirectPath: redirectData.path,
  });
}

// --------- H√†m regex extract chi·ªÅu cao -------
function extractHeightFromMessage(message) {
  const heightRegex =
    /(?:cao|chi·ªÅu cao)?[^0-9]*(\d{3})\s*(?:cm)?|(\d)\s*m\s*(\d{2})?/i;
  const match = message.match(heightRegex);

  if (match) {
    if (match[1]) {
      return parseInt(match[1]);
    } else if (match[2]) {
      const meters = parseInt(match[2]);
      const centimeters = match[3] ? parseInt(match[3]) : 0;
      return meters * 100 + centimeters;
    }
  }
  return null;
}
// ----------- H√†m regex Money ------------
function extractMoneyFromMessage(message) {
  if (!message) return null;

  const text = message.toLowerCase();

  // B·∫Øt "1 tri·ªáu r∆∞·ª°i", "2 tri·ªáu r∆∞·ª°i",...
  const millionWithHalfRegex = /(\d+)\s*(tri·ªáu|tr|m)\s*(r∆∞·ª°i)/i;
  const millionRegex = /(\d+(?:[.,]\d+)?)\s*(tri·ªáu|tr|m)/i;
  const thousandRegex = /(\d+(?:[.,]\d+)?)\s*(ngh√¨n|ng√†n|k)/i;
  const exactNumberRegex = /(\d{3,9})\s*(ƒë|vnd)?/i;

  let match;

  // Tr∆∞·ªùng h·ª£p "1 tri·ªáu r∆∞·ª°i"
  if ((match = text.match(millionWithHalfRegex))) {
    const base = parseInt(match[1], 10);
    return base * 1_000_000 + 500_000;
  }

  // Tr∆∞·ªùng h·ª£p ch·ªâ "1.5 tri·ªáu", "2 tri·ªáu"
  if ((match = text.match(millionRegex))) {
    const value = parseFloat(match[1].replace(",", "."));
    return Math.round(value * 1_000_000);
  }

  // Tr∆∞·ªùng h·ª£p "500 ngh√¨n", "800k"
  if ((match = text.match(thousandRegex))) {
    const value = parseFloat(match[1].replace(",", "."));
    return Math.round(value * 1_000);
  }

  // Tr∆∞·ªùng h·ª£p s·ªë nguy√™n r√µ r√†ng nh∆∞ "700000ƒë"
  if ((match = text.match(exactNumberRegex))) {
    return parseInt(match[1].replace(/\D/g, ""), 10);
  }

  return null;
}

// -------  H√†m regex extract c√¢n n·∫∑ng (c·∫£i ti·∫øn) -----------
function extractWeightFromMessage(message) {
  const weightRegex =
    /(?:n·∫∑ng|c√¢n n·∫∑ng|t√¥i n·∫∑ng)\s*[:\-]?\s*(\d{2,3})(?:\s*(?:kg|k√Ω|kilo))?/i;
  const match = message.match(weightRegex);
  if (match && match[1]) {
    return parseInt(match[1], 10);
  }
  return null;
}

// ---------- H√†m g·ª£i √Ω size d·ª±a tr√™n height, weight ---------------
function suggestSize(height, weight) {
  if (!height || !weight) return null;
  if (height < 160) {
    if (weight < 50) return "XS";
    if (weight <= 60) return "S";
    return "M";
  } else if (height < 170) {
    if (weight < 55) return "S";
    if (weight <= 65) return "M";
    return "L";
  } else if (height < 180) {
    if (weight < 60) return "M";
    if (weight <= 75) return "L";
    return "XL";
  } else {
    if (weight < 70) return "L";
    if (weight <= 85) return "XL";
    return "XXL";
  }
}

module.exports = {
  chatbotReply,
};
